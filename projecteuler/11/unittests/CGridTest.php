<?php

/**
 * @compay self
 * @author Raymond Byczko
 * @filesource CGridTest.php
 * @file CGridTest.php
 * @start_date 2014-07-02 July 2
 * @change_history 2014-07-10 July 10; RByczko; Adjusted a test  case
 * to account for equality in first,second comparison (see CGrid.php).
 * The first will be declared as NOT_A_CANDIDATE.
 * @change_history 2014-07-10 July 10; RByczko; Adjusted name of
 * getCollections to getHCollections.
 * @change_history 2014-07-10 July 10; RByczko; Changed name of eliminateHalf
 * to eliminateHorizontals.
 * @change_history 2014-07-11 July 11; RByczko; Made adjustment to test
 * based on more accurate concept of what consistitutes first and second
 * in eliminateHorizontals (and eliminateVerticals too). first is at one
 * pair of $x,$y.  second is right next to it - just increase $x,$y or both by 1.
 * (And not by m_collection_size).
 * @change_history 2014-07-11 July 11; RByczko; Added testEliminateVerticals.
 * @change_history 2014-07-14 July 14; RByczko; Changed name of
 * largestOneDiagonal to largestOneDiagonal2_4.
 * @change_history 2014-07-14 July 14; RByczko; Added testLargestDiagonal2_4.
 * @change_history 2014-07-16 July 16; RByczko; Added tests:
 * testLargestOneDiagonal3_1, testBCALargestDiagonal3_1,
 * testBCBLargestDiagonal3_1.
 * @change_history 2014-07-16 July 16; RByczko; Added test:
 * testLargestAllDirections, testBLargestAllDirections,
 * testCLargestAllDirections, testProblem11LargestAllDirections.
 * * * @todo - test remaining columns in testEliminateVerticals.
 */
require_once '../CGrid.php';
require_once '../CDiagonalDirection.php';

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-07-02 at 21:14:13.
 */
class CGridTest extends PHPUnit_Framework_TestCase {

    /**
     * @var CGrid
     */
    protected $object;
    protected $object2;
    protected $object5_15;
    protected $object8_8;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new CGrid(6, 2, 4);
        $this->object2 = new CGrid(15, 2, 4);
        $this->object5_15 = new CGrid(15, 5, 4);
        $this->object8_8 = new CGrid(8, 8, 4);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers CGrid::loadGrid
     * @todo   Implement testLoadGrid().
     */
    public function testLoadGrid() {
        $gdata = array(
            0 => array(1, 2, 2, 2, 3, 5),
            1 => array(4, 9, 9, 1, 3, 8)
        );
        $this->object->loadGrid($gdata);
        $grid = $this->object->getGrid();
        $this->assertEquals($grid[0][5], 5);
        $this->assertEquals($grid[1][5], 8);
    }

    /**
     * @covers CGrid::eliminateHalf
     * @todo   Implement testEliminateHalf().
     */
    public function testEliminateHalf() {
        // Remove the following lines when you implement this test.
        /// $this->markTestIncomplete(
        ///         'This test has not been implemented yet.'
        /// );
        $gdata = array(
            0 => array(1, 2, 2, 2, 3, 5),
            1 => array(4, 9, 9, 1, 3, 8)
        );
        $this->object->loadGrid($gdata);
        $this->object->eliminateHorizontals();
        $collections = $this->object->getHCollections();
        $this->assertEquals($collections[0][0], $this->object->NOT_A_CANDIDATE());
        $this->assertEquals($collections[0][1], $this->object->NOT_A_CANDIDATE());
        $this->assertEquals($collections[0][2], $this->object->POSSIBLE_CANDIDATE());

        $this->assertEquals($collections[1][0], $this->object->POSSIBLE_CANDIDATE());
        $this->assertEquals($collections[1][1], $this->object->NOT_A_CANDIDATE());
        $this->assertEquals($collections[1][2], $this->object->NOT_A_CANDIDATE());
    }
    // @todo - make up test for eliminateHorizontals where its only 4 wide.
    // This is a boundary case.  If one dimension is less than or equal to
    // m_collection_size, then eliminate cannot work in that dimension.
    // This was discovered accidently in testEliminateVerticals.
    /*
     * 
     */
    public function testEliminateVerticals()
    {
       $gdata = array(
            0 => array(1, 1, 1, 8, 1),
            1 => array(1, 1, 1, 8, 1),
            2 => array(1, 7, 1, 8, 1),
            3 => array(3, 7, 1, 8, 1),
            4 => array(3, 7, 1, 1, 1),
            5 => array(3, 7, 1, 1, 1),
            6 => array(3, 1, 9, 1, 1),
            7 => array(1, 1, 9, 1, 1),
            8 => array(1, 1, 9, 1, 1),
            9 => array(1, 1, 9, 1, 1)
        );
        $objCGrid = new CGrid(5,10,4);
        $objCGrid->loadGrid($gdata);
        $objCGrid->eliminateVerticals();
        $collections = $objCGrid->getVCollections();
        $ak = array_keys($collections);
        $ak_min = min($ak);
        $this->assertEquals($ak_min, 0);
        $ak_max = max($ak);
        $this->assertEquals($ak_max, 6);
        $this->assertEquals($collections[0][0], $objCGrid->NOT_A_CANDIDATE());
        $this->assertEquals($collections[1][0], $objCGrid->NOT_A_CANDIDATE());
        $this->assertEquals($collections[2][0], $objCGrid->NOT_A_CANDIDATE());
        $this->assertEquals($collections[3][0], $objCGrid->POSSIBLE_CANDIDATE());
        $this->assertEquals($collections[4][0], $objCGrid->NOT_A_CANDIDATE());
        $this->assertEquals($collections[5][0], $objCGrid->NOT_A_CANDIDATE());
        $this->assertEquals($collections[6][0], $objCGrid->NOT_A_CANDIDATE());
        // @todo test other columns
    }
    
    public function testLargest()
    {
        $gdata = array(
            0 => array(1, 1, 1, 2, 2, 5),
            1 => array(1, 9, 9, 1, 1, 1)
        );
        $this->object->loadGrid($gdata);
        $this->object->eliminateHorizontals();
        $l_max_pos=null;
        $l_max_value=null;
        $this->object->largest(CDiagonalDirection::H(), 0, $l_max_pos, $l_max_value);
        $this->assertEquals(2, $l_max_pos);
        $this->assertEquals(20, $l_max_value);
        
        $l_max_pos=null;
        $l_max_value=null;
        $this->object->largest(CDiagonalDirection::H(), 1, $l_max_pos, $l_max_value);
        $this->assertEquals(1, $l_max_pos);
        $this->assertEquals(81, $l_max_value);
    }
    
    public function testLargest2()
    {
        $gdata = array(
            0 => array(1, 2, 3, 2, 2, 1, 1, 1, 4, 5, 6, 7, 1, 1, 1),
            1 => array(2, 3, 4, 2, 1, 1, 8, 8, 8, 8, 1, 1, 1, 1, 1)
        );
        $this->object2->loadGrid($gdata);
        $this->object2->eliminateHorizontals();
        $l_max_pos=null;
        $l_max_value=null;
        $this->object2->largest(CDiagonalDirection::H(), 0, $l_max_pos, $l_max_value);
        $this->assertEquals(8, $l_max_pos);
        $this->assertEquals(840, $l_max_value);
        
        $l_max_pos=null;
        $l_max_value=null;
        $this->object2->largest(CDiagonalDirection::H(), 1, $l_max_pos, $l_max_value);
        $this->assertEquals(6, $l_max_pos);
        $this->assertEquals(64*64, $l_max_value);
    }
    
    public function testLargest3()
    {
        $gdata = array(
            0=>array(1, 1, 9),
            1=>array(1, 1, 9),
            2=>array(1, 1, 9),
            3=>array(2, 1, 9),
            4=>array(2, 1, 1),
            5=>array(2, 1, 1),
            6=>array(2, 4, 1),
            7=>array(5, 4, 1),
            8=>array(5, 4, 1),         
            9=>array(5, 4, 1),
            10=>array(5, 1, 1),
            11=>array(1, 1, 1),
            12=>array(1, 1, 1),
            13=>array(1, 1, 1),
            14=>array(1, 1, 1),
            15=>array(1, 1, 1)
        );
        $objCGrid16_3 = new CGrid(3,16,4);
        $objCGrid16_3->loadGrid($gdata);
        $objCGrid16_3->eliminateHorizontals();
        $x_max_pos=null;
        $x_max_value=null;
        $objCGrid16_3->largest(CDiagonalDirection::V(), 0, $x_max_pos, $x_max_value);
        $this->assertEquals(7, $x_max_pos);
        $this->assertEquals(25*25,$x_max_value);
        $x_max_pos=null;
        $x_max_value=null;
        $objCGrid16_3->largest(CDiagonalDirection::V(), 1, $x_max_pos, $x_max_value);
        $this->assertEquals(6, $x_max_pos);
        $this->assertEquals(16*16,$x_max_value); 
        $x_max_pos=null;
        $x_max_value=null;
        $objCGrid16_3->largest(CDiagonalDirection::V(), 2, $x_max_pos, $x_max_value); 
        $this->assertEquals(0, $x_max_pos);
        $this->assertEquals(81*81,$x_max_value);     
    
    }
    
    public function testLargestHorizontal()
    {
        $gdata = array(
            0 => array(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
            1 => array(2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2),
            2 => array(1, 2, 3, 2, 2, 1, 1, 1, 4, 5, 6, 7, 1, 1, 1),
            3 => array(2, 3, 4, 2, 1, 1, 8, 8, 8, 8, 1, 1, 1, 1, 1),
            4 => array(3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3)
        );
        $this->object5_15->loadGrid($gdata);
        $this->object5_15->eliminateHorizontals();
        
        $max_y=null;
        $max_x=null;
        $max_value=null;
        $this->object5_15->largestHorizontal($max_y, $max_x, $max_value);
        $this->assertEquals(3, $max_y);
        $this->assertEquals(6, $max_x);
        $this->assertEquals(64*64, $max_value);    
    }
    
    public function testLargestHorizontal2()
    {
        $gdata = array(
            0 => array(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
            1 => array(2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2),
            2 => array(1, 2, 3, 2, 2, 1, 1, 1, 4, 5, 6, 7, 1, 1, 1),
            3 => array(2, 3, 4, 2, 1, 1, 8, 8, 8, 8, 1, 1, 1, 1, 1),
            4 => array(3, 3, 9, 9, 9, 9, 3, 3, 3, 3, 3, 3, 3, 3, 3)
        );
        $this->object5_15->loadGrid($gdata);
        $this->object5_15->eliminateHorizontals();
        
        $max_y=null;
        $max_x=null;
        $max_value=null;
        $this->object5_15->largestHorizontal($max_y, $max_x, $max_value);
        $this->assertEquals(4, $max_y);
        $this->assertEquals(2, $max_x);
        $this->assertEquals(81*81, $max_value);    
    }
    
    public function testLargestOneDiagonal()
    {
        $gdata8_8 = array(
            0 => array(1, 5, 1, 1, 1, 1, 1, 1 ),
            1 => array(1, 1, 5, 1, 1, 1, 1, 1 ),
            2 => array(1, 1, 9, 5, 1, 1, 1, 1 ),
            3 => array(1, 1, 1, 9, 5, 1, 1, 1 ),
            4 => array(2, 1, 1, 3, 9, 1, 1, 1 ),
            5 => array(1, 2, 1, 1, 3, 9, 1, 1 ),
            6 => array(1, 1, 2, 1, 1, 3, 1, 1 ),
            7 => array(1, 1, 1, 2, 1, 1, 3, 1 )               
        );
        $this->object8_8->loadGrid($gdata8_8);
        $this->object8_8->eliminateDiagonals2_4();   
        $y_max = null;
        $x_max = null;
        $max_value = null;
        $this->object8_8->largestOneDiagonal2_4(0, 0, $y_max, $x_max, $max_value);
        $this->assertEquals(81*81, $max_value);
        $this->assertEquals(2, $y_max);
        $this->assertEquals(2, $x_max);
        //
        $y_max = null;
        $x_max = null;
        $max_value = null;
        $this->object8_8->largestOneDiagonal2_4(0, 1, $y_max, $x_max, $max_value);
        $this->assertEquals(25*25, $max_value);
        $this->assertEquals(0, $y_max);
        $this->assertEquals(1, $x_max);
        //
        $y_max = null;
        $x_max = null;
        $max_value = null;
        $this->object8_8->largestOneDiagonal2_4(5, 0, $y_max, $x_max, $max_value);
        $this->assertEquals(null, $max_value);
        $this->assertEquals(null, $y_max);
        $this->assertEquals(null, $x_max);
    }
    
    public function testEliminateDiagonals3_1()
    {
        $gdata8_8 = array(
            0 => array(1, 1, 1, 1, 1, 1, 1, 1 ),
            1 => array(1, 1, 1, 1, 1, 1, 1, 1 ),
            2 => array(1, 1, 1, 1, 1, 1, 1, 1 ),
            3 => array(1, 1, 1, 1, 1, 1, 1, 4 ),
            4 => array(1, 1, 1, 2, 1, 1, 4, 1 ),
            5 => array(1, 1, 2, 1, 1, 4, 1, 1 ),
            6 => array(1, 2, 1, 1, 4, 1, 1, 1 ),
            7 => array(2, 1, 1, 1, 1, 1, 1, 1 )               
        );
        $this->object8_8->loadGrid($gdata8_8);
        $this->object8_8->eliminateDiagonals3_1(); 
        
        $collections = $this->object8_8->getD3_1Collections();
        $this->assertEquals($collections[7][0], $this->object->POSSIBLE_CANDIDATE());
        $this->assertEquals($collections[6][1], $this->object->NOT_A_CANDIDATE());
        $this->assertEquals($collections[5][2], $this->object->NOT_A_CANDIDATE());
        $this->assertEquals($collections[4][3], $this->object->NOT_A_CANDIDATE());
    }
    
    public function testLargestDiagonal2_4()
    {
        $gdata8_8 = array(
                0 => array(2, 1, 1, 1, 1, 7, 1, 1 ),
                1 => array(1, 2, 1, 1, 1, 1, 7, 1 ),
                2 => array(1, 9, 2, 1, 1, 1, 1, 7 ),
                3 => array(1, 1, 9, 2, 1, 1, 1, 1 ),
                4 => array(1, 1, 1, 8, 3, 1, 1, 1 ),
                5 => array(1, 1, 1, 1, 9, 3, 1, 1 ),
                6 => array(1, 1, 1, 1, 1, 1, 1, 1 ),
                7 => array(1, 1, 1, 1, 1, 1, 1, 1 )               
            );
        $this->object8_8->loadGrid($gdata8_8);
        
        $c2_4 = $this->object8_8->getD2_4Collections();
        $keys2_4 = array_keys($c2_4);
        $min_keys2_4 = min($keys2_4);
        $max_keys2_4 = max($keys2_4);
        $this->assertEquals($min_keys2_4, 0);
        $this->assertEquals($max_keys2_4, 4);
        
        $this->object8_8->eliminateDiagonals2_4();
        
        $c2_4 = $this->object8_8->getD2_4Collections();
        $keys2_4 = array_keys($c2_4);
        $min_keys2_4 = min($keys2_4);
        $max_keys2_4 = max($keys2_4);
        $this->assertEquals($min_keys2_4, 0);
        $this->assertEquals($max_keys2_4, 4);
        
        $y_largest = null;
        $x_largest = null;
        $largest = null;
        $ret_l = $this->object8_8->largestDiagonal2_4($y_largest, $x_largest, $largest);
        $this->assertEquals($y_largest, 2);
        $this->assertEquals($x_largest, 1);
        $this->assertEquals($largest, 81*72);
    

    }
    
    public function testLargestOneDiagonal3_1()
    {
         $gdata8_8 = array(
            0 => array(1, 1, 1, 1, 1, 1, 1, 1 ),
            1 => array(1, 1, 1, 1, 1, 1, 1, 8 ),
            2 => array(1, 1, 1, 1, 1, 1, 8, 1 ),
            3 => array(1, 1, 1, 1, 1, 8, 1, 4 ),
            4 => array(1, 1, 1, 2, 3, 1, 4, 1 ),
            5 => array(1, 1, 2, 3, 1, 4, 1, 1 ),
            6 => array(1, 2, 3, 1, 4, 1, 1, 1 ),
            7 => array(2, 3, 1, 1, 1, 1, 1, 1 )               
        );
        $this->object8_8->loadGrid($gdata8_8);
        $this->object8_8->eliminateDiagonals3_1(); 
        
        $collections = $this->object8_8->getD3_1Collections();
        $this->assertEquals($collections[7][0], $this->object8_8->POSSIBLE_CANDIDATE());
        $this->assertEquals($collections[6][1], $this->object8_8->NOT_A_CANDIDATE());
        $this->assertEquals($collections[5][2], $this->object8_8->NOT_A_CANDIDATE());
        $this->assertEquals($collections[4][3], $this->object8_8->NOT_A_CANDIDATE());  
    
        $this->assertEquals($collections[7][1], $this->object8_8->NOT_A_CANDIDATE());  
        $this->assertEquals($collections[6][2], $this->object8_8->NOT_A_CANDIDATE());  
        $this->assertEquals($collections[5][3], $this->object8_8->NOT_A_CANDIDATE());
        $this->assertEquals($collections[4][4], $this->object8_8->POSSIBLE_CANDIDATE());        
        $y_max = null;
        $x_max = null;
        $max_value = null;
        $this->object8_8->largestOneDiagonal3_1(7, 1, &$y_max, &$x_max, &$max_value);
        $this->assertEquals($y_max, 4);
        $this->assertEquals($x_max, 4);
        echo 'max_value='.$max_value;
        $this->assertEquals($max_value, 24*64);
    }
    
    public function testBCALargestDiagonal3_1()
    {
        $obj8_8 = new CGrid(8, 8, 4);
        $gdata8_8 = array(
                0 => array(1, 1, 1, 4, 1, 1, 1, 1 ),
                1 => array(1, 1, 4, 1, 1, 1, 1, 1 ),
                2 => array(1, 4, 1, 1, 1, 1, 1, 1 ),
                3 => array(4, 1, 1, 1, 1, 1, 1, 1 ),
                4 => array(1, 1, 1, 1, 1, 1, 1, 3 ),
                5 => array(1, 1, 1, 1, 1, 1, 3, 1 ),
                6 => array(1, 1, 1, 1, 1, 3, 1, 1 ),
                7 => array(1, 1, 1, 1, 3, 1, 1, 1 )               
            );
        $obj8_8->loadGrid($gdata8_8);
        $obj8_8->eliminateDiagonals3_1();
                
        $y_largest = null;
        $x_largest = null;
        $largest = null;
        
        $ret_l = $obj8_8->largestDiagonal3_1($y_largest, $x_largest, $largest);
        $this->assertEquals($y_largest, 3);
        $this->assertEquals($x_largest, 0);
        $this->assertEquals($largest, 4*4*4*4);       
    }
    
    public function testBCBLargestDiagonal3_1()
    {
        $obj8_8 = new CGrid(8, 8, 4);
        $gdata8_8 = array(
                0 => array(1, 1, 1, 4, 1, 1, 1, 1 ),
                1 => array(1, 1, 4, 1, 1, 1, 1, 1 ),
                2 => array(1, 4, 1, 1, 1, 1, 1, 1 ),
                3 => array(4, 1, 1, 1, 1, 1, 1, 1 ),
                4 => array(1, 1, 1, 1, 1, 1, 1, 7 ),
                5 => array(1, 1, 1, 1, 1, 1, 7, 1 ),
                6 => array(1, 1, 1, 1, 1, 7, 1, 1 ),
                7 => array(1, 1, 1, 1, 7, 1, 1, 1 )               
            );
        $obj8_8->loadGrid($gdata8_8);
        $obj8_8->eliminateDiagonals3_1();
                
        $y_largest = null;
        $x_largest = null;
        $largest = null;
        
        $ret_l = $obj8_8->largestDiagonal3_1($y_largest, $x_largest, $largest);
        $this->assertEquals($y_largest, 7);
        $this->assertEquals($x_largest, 4);
        $this->assertEquals($largest, 7*7*7*7);       
    }
    public function testLargestAllDirections()
    {
        $obj8_8 = new CGrid(8, 8, 4);
        $gdata8_8 = array(
                0 => array(1, 1, 1, 4, 1, 1, 1, 1 ),
                1 => array(1, 1, 4, 1, 1, 1, 1, 1 ),
                2 => array(1, 4, 1, 1, 1, 1, 1, 1 ),
                3 => array(4, 9, 1, 1, 1, 1, 1, 1 ),
                4 => array(1, 1, 6, 1, 1, 1, 1, 7 ),
                5 => array(1, 1, 1, 5, 1, 1, 7, 1 ),
                6 => array(1, 1, 1, 1, 4, 7, 1, 1 ),
                7 => array(1, 1, 1, 1, 7, 1, 1, 1 )               
            );
        $obj8_8->loadGrid($gdata8_8);
        $largestSet = array();
        $largestValue = null;
        $obj8_8->largestAllDirections($largestSet, $largestValue);
        $this->assertEquals(count($largestSet), 4);
        $this->assertEquals($largestSet[0]['y'], 7);
        $this->assertEquals($largestSet[0]['x'], 4);
        $this->assertEquals($largestValue, 7*7*7*7);           
    }
    
    public function testBLargestAllDirections()
    {
        $obj8_8 = new CGrid(8, 8, 4);
        $gdata8_8 = array(
                0 => array(1, 1, 9, 9, 9, 9, 1, 1 ),
                1 => array(1, 1, 1, 1, 1, 1, 1, 1 ),
                2 => array(1, 8, 1, 1, 1, 1, 1, 1 ),
                3 => array(1, 1, 8, 1, 1, 1, 1, 1 ),
                4 => array(1, 1, 1, 8, 1, 1, 1, 10 ),
                5 => array(1, 1, 1, 1, 8, 1, 1, 10 ),
                6 => array(1, 1, 1, 1, 1, 1, 1, 10 ),
                7 => array(2, 2, 2, 2, 1, 1, 1, 10 )               
            );
        $obj8_8->loadGrid($gdata8_8);
        $largestSet = array();
        $largestValue = null;
        $obj8_8->largestAllDirections($largestSet, $largestValue);
        $this->assertEquals(count($largestSet), 4);
        $this->assertEquals($largestSet[0]['y'], 4);
        $this->assertEquals($largestSet[0]['x'], 7);
        $this->assertEquals($largestSet[1]['y'], 5);
        $this->assertEquals($largestSet[1]['x'], 7);
        $this->assertEquals($largestSet[2]['y'], 6);
        $this->assertEquals($largestSet[2]['x'], 7); 
        $this->assertEquals($largestSet[3]['y'], 7);
        $this->assertEquals($largestSet[3]['x'], 7);            
        $this->assertEquals($largestValue, 10*10*10*10);           
    }
    public function testCLargestAllDirections()
    {
        $obj8_8 = new CGrid(8, 4, 4);
        $gdata8_8 = array(
                0 => array(1, 5, 1, 7, 1, 1, 8, 1 ),
                1 => array(1, 5, 1, 7, 1, 1, 8, 1 ),
                2 => array(1, 5, 1, 7, 1, 1, 8, 1 ),
                3 => array(1, 5, 1, 7, 1, 1, 8, 1 )          
            );
        $obj8_8->loadGrid($gdata8_8);
        $largestSet = array();
        $largestValue = null;
        $obj8_8->largestAllDirections($largestSet, $largestValue);
        $this->assertEquals(count($largestSet), 4);
        $this->assertEquals($largestSet[0]['y'], 0);
        $this->assertEquals($largestSet[0]['x'], 6);
        $this->assertEquals($largestSet[1]['y'], 1);
        $this->assertEquals($largestSet[1]['x'], 6);
        $this->assertEquals($largestSet[2]['y'], 2);
        $this->assertEquals($largestSet[2]['x'], 6); 
        $this->assertEquals($largestSet[3]['y'], 3);
        $this->assertEquals($largestSet[3]['x'], 6);            
        $this->assertEquals($largestValue, 8*8*8*8);           
    }
    /**
     * This test method solves problem 11.
     */
    public function testProblem11LargestAllDirections()
    {
        $obj20_20 = new CGrid(20, 20, 4);
        $gdata20_20 = array(
                0 => array(08, 02, 22, 97, 38, 15, 00, 40, 00, 75, 04, 05, 07, 78, 52, 12, 50, 77, 91, 08),
                1 => array(49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 04, 56, 62, 00),
                2 => array(81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 03, 49, 13, 36, 65),
                3 => array(52, 70, 95, 23, 04, 60, 11, 42, 69, 24, 68, 56, 01, 32, 56, 71, 37, 02, 36, 91),
                4 => array(22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80),
                5 => array(24, 47, 32, 60, 99, 03, 45, 02, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50),
                6 => array(32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70),
                7 => array(67, 26, 20, 68, 02, 62, 12, 20, 95, 63, 94, 39, 63, 08, 40, 91, 66, 49, 94, 21),
                8 => array(24, 55, 58, 05, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72),
                9 => array(21, 36, 23, 09, 75, 00, 76, 44, 20, 45, 35, 14, 00, 61, 33, 97, 34, 31, 33, 95),
               10 => array(78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 03, 80, 04, 62, 16, 14, 09, 53, 56, 92),
               11 => array(16, 39, 05, 42, 96, 35, 31, 47, 55, 58, 88, 24, 00, 17, 54, 24, 36, 29, 85, 57),
               12 => array(86, 56, 00, 48, 35, 71, 89, 07, 05, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58),
               13 => array(19, 80, 81, 68, 05, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 04, 89, 55, 40),
               14 => array(04, 52, 08, 83, 97, 35, 99, 16, 07, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66),
               15 => array(88, 36, 68, 87, 57, 62, 20, 72, 03, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69),
               16 => array(04, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 08, 46, 29, 32, 40, 62, 76, 36),
               17 => array(20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 04, 36, 16),
               18 => array(20, 73, 35, 29, 78, 31, 90, 01, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 05, 54),
               19 => array(01, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 01, 89, 19, 67, 48)
            );
        $obj20_20->loadGrid($gdata20_20);
        $largestSet = array();
        $largestValue = null;
        $obj20_20->largestAllDirections($largestSet, $largestValue);
        $this->assertEquals(count($largestSet), 4);
        echo 'largestValue='.$largestValue."\n";
        
        echo 'ls[0][y]:'.$largestSet[0]['y']."\n";
        echo 'ls[0][x]:'.$largestSet[0]['x']."\n";
        echo 'ls[1][y]:'.$largestSet[1]['y']."\n";
        echo 'ls[1][x]:'.$largestSet[1]['x']."\n";
        echo 'ls[2][y]:'.$largestSet[2]['y'],"\n";
        echo 'ls[2][x]:'.$largestSet[2]['x']."\n"; 
        echo 'ls[3][y]:'.$largestSet[3]['y']."\n";
        echo 'ls[3][x]:'.$largestSet[3]['x']."\n";
    }
}